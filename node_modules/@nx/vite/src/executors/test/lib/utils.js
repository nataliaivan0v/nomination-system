"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getOptions: function() {
        return getOptions;
    },
    getExtraArgs: function() {
        return getExtraArgs;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _devkit = require("@nx/devkit");
const _optionsutils = require("../../../utils/options-utils");
const _path = require("path");
const _executorutils = require("../../../utils/executor-utils");
async function getOptions(options, context, projectRoot, extraArgs) {
    var _resolved_config, _resolved_config1;
    // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.
    const { loadConfigFromFile, mergeConfig } = await (0, _executorutils.loadViteDynamicImport)();
    const viteConfigPath = (0, _optionsutils.normalizeViteConfigFilePath)(context.root, projectRoot, options.configFile);
    if (!viteConfigPath) {
        throw new Error((0, _devkit.stripIndents)`
        Unable to load test config from config file ${viteConfigPath}.
        
        Please make sure that vitest is configured correctly, 
        or use the @nx/vite:vitest generator to configure it for you.
        You can read more here: https://nx.dev/nx-api/vite/generators/vitest
        `);
    }
    var _extraArgs_mode;
    const resolved = await loadConfigFromFile({
        mode: (_extraArgs_mode = extraArgs == null ? void 0 : extraArgs.mode) != null ? _extraArgs_mode : 'production',
        command: 'serve'
    }, viteConfigPath);
    if (!viteConfigPath || !(resolved == null ? void 0 : (_resolved_config = resolved.config) == null ? void 0 : _resolved_config['test'])) {
        var _resolved_path;
        _devkit.logger.warn((0, _devkit.stripIndents)`Unable to load test config from config file ${(_resolved_path = resolved == null ? void 0 : resolved.path) != null ? _resolved_path : viteConfigPath}
  Some settings may not be applied as expected.
  You can manually set the config in the project, ${context.projectName}, configuration.
        `);
    }
    const root = projectRoot === '.' ? process.cwd() : (0, _path.relative)(context.cwd, (0, _devkit.joinPathFragments)(context.root, projectRoot));
    var _resolved_config_root;
    const settings = _extends._({}, extraArgs, {
        // This should not be needed as it's going to be set in vite.config.ts
        // but leaving it here in case someone did not migrate correctly
        root: (_resolved_config_root = resolved.config.root) != null ? _resolved_config_root : root,
        configFile: viteConfigPath
    });
    var _resolved_config_test;
    return mergeConfig((_resolved_config_test = resolved == null ? void 0 : (_resolved_config1 = resolved.config) == null ? void 0 : _resolved_config1['test']) != null ? _resolved_config_test : {}, settings);
}
async function getExtraArgs(options) {
    // support passing extra args to vite cli
    const extraArgs = {};
    for (const key of Object.keys(options)){
        extraArgs[key] = options[key];
    }
    return extraArgs;
}

//# sourceMappingURL=utils.js.map