{"version":3,"sources":["../../../../../../../packages/vite/src/executors/test/lib/utils.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  stripIndents,\n} from '@nx/devkit';\nimport { VitestExecutorOptions } from '../schema';\nimport { normalizeViteConfigFilePath } from '../../../utils/options-utils';\nimport { relative } from 'path';\nimport { loadViteDynamicImport } from '../../../utils/executor-utils';\n\nexport async function getOptions(\n  options: VitestExecutorOptions,\n  context: ExecutorContext,\n  projectRoot: string,\n  extraArgs: Record<string, any>\n) {\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { loadConfigFromFile, mergeConfig } = await loadViteDynamicImport();\n\n  const viteConfigPath = normalizeViteConfigFilePath(\n    context.root,\n    projectRoot,\n    options.configFile\n  );\n\n  if (!viteConfigPath) {\n    throw new Error(\n      stripIndents`\n        Unable to load test config from config file ${viteConfigPath}.\n        \n        Please make sure that vitest is configured correctly, \n        or use the @nx/vite:vitest generator to configure it for you.\n        You can read more here: https://nx.dev/nx-api/vite/generators/vitest\n        `\n    );\n  }\n\n  const resolved = await loadConfigFromFile(\n    {\n      mode: extraArgs?.mode ?? 'production',\n      command: 'serve',\n    },\n    viteConfigPath\n  );\n\n  if (!viteConfigPath || !resolved?.config?.['test']) {\n    logger.warn(stripIndents`Unable to load test config from config file ${\n      resolved?.path ?? viteConfigPath\n    }\n  Some settings may not be applied as expected.\n  You can manually set the config in the project, ${\n    context.projectName\n  }, configuration.\n        `);\n  }\n  const root =\n    projectRoot === '.'\n      ? process.cwd()\n      : relative(context.cwd, joinPathFragments(context.root, projectRoot));\n\n  const settings = {\n    ...extraArgs,\n    // This should not be needed as it's going to be set in vite.config.ts\n    // but leaving it here in case someone did not migrate correctly\n    root: resolved.config.root ?? root,\n    configFile: viteConfigPath,\n  };\n\n  return mergeConfig(resolved?.config?.['test'] ?? {}, settings);\n}\n\nexport async function getExtraArgs(\n  options: VitestExecutorOptions\n): Promise<Record<string, any>> {\n  // support passing extra args to vite cli\n  const extraArgs: Record<string, any> = {};\n  for (const key of Object.keys(options)) {\n    extraArgs[key] = options[key];\n  }\n\n  return extraArgs;\n}\n"],"names":["getOptions","getExtraArgs","options","context","projectRoot","extraArgs","resolved","loadConfigFromFile","mergeConfig","loadViteDynamicImport","viteConfigPath","normalizeViteConfigFilePath","root","configFile","Error","stripIndents","mode","command","config","logger","warn","path","projectName","process","cwd","relative","joinPathFragments","settings","key","Object","keys"],"mappings":";;;;;;;;IAWsBA,UAAU;eAAVA;;IA6DAC,YAAY;eAAZA;;;;wBAnEf;8BAEqC;sBACnB;+BACa;AAE/B,eAAeD,WACpBE,OAA8B,EAC9BC,OAAwB,EACxBC,WAAmB,EACnBC,SAA8B;QA+BNC,kBAuBLA;IApDnB,yFAAyF;IACzF,MAAM,EAAEC,kBAAkB,EAAEC,WAAW,EAAE,GAAG,MAAMC,IAAAA,oCAAqB;IAEvE,MAAMC,iBAAiBC,IAAAA,yCAA2B,EAChDR,QAAQS,IAAI,EACZR,aACAF,QAAQW,UAAU;IAGpB,IAAI,CAACH,gBAAgB;QACnB,MAAM,IAAII,MACRC,IAAAA,oBAAY,CAAA,CAAC;oDACiC,EAAEL,eAAe;;;;;QAK7D,CAAC;IAEP;QAIUL;IAFV,MAAMC,WAAW,MAAMC,mBACrB;QACES,MAAMX,CAAAA,kBAAAA,6BAAAA,UAAWW,IAAI,YAAfX,kBAAmB;QACzBY,SAAS;IACX,GACAP;IAGF,IAAI,CAACA,kBAAkB,EAACJ,6BAAAA,mBAAAA,SAAUY,MAAM,qBAAhBZ,gBAAkB,CAAC,OAAO,GAAE;YAEhDA;QADFa,cAAM,CAACC,IAAI,CAACL,IAAAA,oBAAY,CAAA,CAAC,4CAA4C,EACnET,CAAAA,iBAAAA,4BAAAA,SAAUe,IAAI,YAAdf,iBAAkBI,eACnB;;kDAE6C,EAC9CP,QAAQmB,WAAW,CACpB;QACK,CAAC;IACP;IACA,MAAMV,OACJR,gBAAgB,MACZmB,QAAQC,GAAG,KACXC,IAAAA,cAAQ,EAACtB,QAAQqB,GAAG,EAAEE,IAAAA,yBAAiB,EAACvB,QAAQS,IAAI,EAAER;QAMpDE;IAJR,MAAMqB,WAAW,eACZtB;QACH,sEAAsE;QACtE,gEAAgE;QAChEO,MAAMN,CAAAA,wBAAAA,SAASY,MAAM,CAACN,IAAI,YAApBN,wBAAwBM;QAC9BC,YAAYH;;QAGKJ;IAAnB,OAAOE,YAAYF,CAAAA,wBAAAA,6BAAAA,oBAAAA,SAAUY,MAAM,qBAAhBZ,iBAAkB,CAAC,OAAO,YAA1BA,wBAA8B,CAAC,GAAGqB;AACvD;AAEO,eAAe1B,aACpBC,OAA8B;IAE9B,yCAAyC;IACzC,MAAMG,YAAiC,CAAC;IACxC,KAAK,MAAMuB,OAAOC,OAAOC,IAAI,CAAC5B,SAAU;QACtCG,SAAS,CAACuB,IAAI,GAAG1B,OAAO,CAAC0B,IAAI;IAC/B;IAEA,OAAOvB;AACT"}