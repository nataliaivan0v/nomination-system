{"version":3,"sources":["../../../../../../packages/vite/src/executors/test/vitest.impl.ts"],"sourcesContent":["import { ExecutorContext, workspaceRoot } from '@nx/devkit';\nimport { VitestExecutorOptions } from './schema';\nimport { resolve } from 'path';\nimport { registerTsConfigPaths } from '@nx/js/src/internal';\nimport { NxReporter } from './lib/nx-reporter';\nimport { getExtraArgs, getOptions } from './lib/utils';\n\nexport async function* vitestExecutor(\n  options: VitestExecutorOptions,\n  context: ExecutorContext\n) {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n\n  registerTsConfigPaths(resolve(workspaceRoot, projectRoot, 'tsconfig.json'));\n\n  process.env.VITE_CJS_IGNORE_WARNING = 'true';\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { startVitest } = await (Function(\n    'return import(\"vitest/node\")'\n  )() as Promise<typeof import('vitest/node')>);\n\n  const extraArgs = await getExtraArgs(options);\n  const resolvedOptions =\n    (await getOptions(options, context, projectRoot, extraArgs)) ?? {};\n\n  const nxReporter = new NxReporter(resolvedOptions['watch']);\n  if (resolvedOptions['reporters'] === undefined) {\n    resolvedOptions['reporters'] = [];\n  } else if (typeof resolvedOptions['reporters'] === 'string') {\n    resolvedOptions['reporters'] = [resolvedOptions['reporters']];\n  }\n  resolvedOptions['reporters'].push(nxReporter);\n\n  const cliFilters = options.testFiles ?? [];\n\n  const ctx = await startVitest(\n    resolvedOptions['mode'] ?? 'test',\n    cliFilters,\n    resolvedOptions\n  );\n\n  let hasErrors = false;\n\n  const processExit = () => {\n    ctx.exit();\n    if (hasErrors) {\n      process.exit(1);\n    } else {\n      process.exit(0);\n    }\n  };\n\n  if (resolvedOptions['watch'] === true) {\n    process.on('SIGINT', processExit);\n    process.on('SIGTERM', processExit);\n    process.on('exit', processExit);\n  }\n\n  for await (const report of nxReporter) {\n    // vitest sets the exitCode = 1 when code coverage isn't met\n    hasErrors =\n      report.hasErrors || (process.exitCode && process.exitCode !== 0);\n  }\n\n  return {\n    success: !hasErrors,\n  };\n}\n\nexport default vitestExecutor;\n"],"names":["vitestExecutor","options","context","projectRoot","projectsConfigurations","projects","projectName","root","registerTsConfigPaths","resolve","workspaceRoot","process","env","VITE_CJS_IGNORE_WARNING","startVitest","Function","extraArgs","getExtraArgs","resolvedOptions","getOptions","nxReporter","NxReporter","undefined","push","cliFilters","testFiles","ctx","hasErrors","processExit","exit","on","report","exitCode","success"],"mappings":";;;;;;;;IAOuBA,cAAc;eAAdA;;IA+DvB,OAA8B;eAA9B;;;wBAtE+C;sBAEvB;0BACc;4BACX;uBACc;AAElC,gBAAgBA,eACrBC,OAA8B,EAC9BC,OAAwB;IAExB,MAAMC,cACJD,QAAQE,sBAAsB,CAACC,QAAQ,CAACH,QAAQI,WAAW,CAAC,CAACC,IAAI;IAEnEC,IAAAA,+BAAqB,EAACC,IAAAA,aAAO,EAACC,qBAAa,EAAEP,aAAa;IAE1DQ,QAAQC,GAAG,CAACC,uBAAuB,GAAG;IACtC,yFAAyF;IACzF,MAAM,EAAEC,WAAW,EAAE,GAAG,MAAOC,SAC7B;IAGF,MAAMC,YAAY,MAAMC,IAAAA,mBAAY,EAAChB;QAElC;IADH,MAAMiB,kBACJ,CAAC,OAAA,MAAMC,IAAAA,iBAAU,EAAClB,SAASC,SAASC,aAAaa,sBAAhD,OAA+D,CAAC;IAEnE,MAAMI,aAAa,IAAIC,sBAAU,CAACH,eAAe,CAAC,QAAQ;IAC1D,IAAIA,eAAe,CAAC,YAAY,KAAKI,WAAW;QAC9CJ,eAAe,CAAC,YAAY,GAAG,EAAE;IACnC,OAAO,IAAI,OAAOA,eAAe,CAAC,YAAY,KAAK,UAAU;QAC3DA,eAAe,CAAC,YAAY,GAAG;YAACA,eAAe,CAAC,YAAY;SAAC;IAC/D;IACAA,eAAe,CAAC,YAAY,CAACK,IAAI,CAACH;QAEfnB;IAAnB,MAAMuB,aAAavB,CAAAA,qBAAAA,QAAQwB,SAAS,YAAjBxB,qBAAqB,EAAE;QAGxCiB;IADF,MAAMQ,MAAM,MAAMZ,YAChBI,CAAAA,wBAAAA,eAAe,CAAC,OAAO,YAAvBA,wBAA2B,QAC3BM,YACAN;IAGF,IAAIS,YAAY;IAEhB,MAAMC,cAAc;QAClBF,IAAIG,IAAI;QACR,IAAIF,WAAW;YACbhB,QAAQkB,IAAI,CAAC;QACf,OAAO;YACLlB,QAAQkB,IAAI,CAAC;QACf;IACF;IAEA,IAAIX,eAAe,CAAC,QAAQ,KAAK,MAAM;QACrCP,QAAQmB,EAAE,CAAC,UAAUF;QACrBjB,QAAQmB,EAAE,CAAC,WAAWF;QACtBjB,QAAQmB,EAAE,CAAC,QAAQF;IACrB;IAEA,WAAW,MAAMG,UAAUX,WAAY;QACrC,4DAA4D;QAC5DO,YACEI,OAAOJ,SAAS,IAAKhB,QAAQqB,QAAQ,IAAIrB,QAAQqB,QAAQ,KAAK;IAClE;IAEA,OAAO;QACLC,SAAS,CAACN;IACZ;AACF;MAEA,WAAe3B"}