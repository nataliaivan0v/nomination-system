{"version":3,"sources":["../../../../../../packages/vite/src/generators/configuration/configuration.ts"],"sourcesContent":["import {\n  formatFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n} from '@nx/devkit';\nimport { initGenerator as jsInitGenerator } from '@nx/js';\n\nimport {\n  addOrChangeBuildTarget,\n  addOrChangeServeTarget,\n  addPreviewTarget,\n  createOrEditViteConfig,\n  deleteWebpackConfig,\n  editTsConfig,\n  findExistingTargetsInProject,\n  handleUnknownExecutors,\n  handleUnsupportedUserProvidedTargets,\n  moveAndEditIndexHtml,\n  TargetFlags,\n  UserProvidedTargetName,\n} from '../../utils/generator-utils';\n\nimport initGenerator from '../init/init';\nimport vitestGenerator from '../vitest/vitest-generator';\nimport { ViteConfigurationGeneratorSchema } from './schema';\nimport { ensureDependencies } from '../../utils/ensure-dependencies';\n\nexport function viteConfigurationGenerator(\n  host: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  return viteConfigurationGeneratorInternal(host, {\n    addPlugin: false,\n    ...schema,\n  });\n}\n\nexport async function viteConfigurationGeneratorInternal(\n  tree: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  schema.addPlugin ??= process.env.NX_ADD_PLUGINS !== 'false';\n\n  const projectConfig = readProjectConfiguration(tree, schema.project);\n  const {\n    targets,\n\n    root: projectRoot,\n  } = projectConfig;\n\n  const projectType = projectConfig.projectType ?? 'library';\n  let buildTargetName = 'build';\n  let serveTargetName = 'serve';\n  let testTargetName = 'test';\n\n  schema.includeLib ??= projectType === 'library';\n\n  // Setting default to jsdom since it is the most common use case (React, Web).\n  // The @nx/js:lib generator specifically sets this to node to be more generic.\n  schema.testEnvironment ??= 'jsdom';\n\n  /**\n   * This is for when we are converting an existing project\n   * to use the vite executors.\n   */\n  let projectAlreadyHasViteTargets: TargetFlags = {};\n\n  if (!schema.newProject) {\n    const userProvidedTargetName: UserProvidedTargetName = {\n      build: schema.buildTarget,\n      serve: schema.serveTarget,\n      test: schema.testTarget,\n    };\n\n    const {\n      validFoundTargetName,\n      projectContainsUnsupportedExecutor,\n      userProvidedTargetIsUnsupported,\n      alreadyHasNxViteTargets,\n    } = findExistingTargetsInProject(targets, userProvidedTargetName);\n    projectAlreadyHasViteTargets = alreadyHasNxViteTargets;\n    /**\n     * This means that we only found unsupported build targets in that project.\n     * The only way that buildTarget is defined, means that it is supported.\n     *\n     * If the `unsupported` flag was false, it would mean that we did not find\n     * a build target at all, so we can create a new one.\n     *\n     * So we only throw if we found a target, but it is unsupported.\n     */\n    if (!validFoundTargetName.build && projectContainsUnsupportedExecutor) {\n      throw new Error(\n        `The project ${schema.project} cannot be converted to use the @nx/vite executors.`\n      );\n    }\n\n    if (\n      alreadyHasNxViteTargets.build &&\n      (alreadyHasNxViteTargets.serve || projectType === 'library') &&\n      alreadyHasNxViteTargets.test\n    ) {\n      throw new Error(\n        `The project ${schema.project} is already configured to use the @nx/vite executors.\n        Please try a different project, or remove the existing targets \n        and re-run this generator to reset the existing Vite Configuration.\n        `\n      );\n    }\n\n    /**\n     * This means that we did not find any supported executors\n     * so we don't have any valid target names.\n     *\n     * However, the executors that we may have found are not in the\n     * list of the specifically unsupported executors either.\n     *\n     * So, we should warn the user about it.\n     */\n\n    if (\n      !projectContainsUnsupportedExecutor &&\n      !validFoundTargetName.build &&\n      !validFoundTargetName.serve &&\n      !validFoundTargetName.test\n    ) {\n      await handleUnknownExecutors(schema.project);\n    }\n\n    /**\n     * There is a possibility at this stage that the user has provided\n     * targets with unsupported executors.\n     * We keep track here of which of the targets that the user provided\n     * are unsupported.\n     * We do this with the `userProvidedTargetIsUnsupported` object,\n     * which contains flags for each target (whether it is supported or not).\n     *\n     * We also keep track of the targets that we found in the project,\n     * through the findExistingTargetsInProject function, which returns\n     * targets for build/serve/test that use supported executors, and\n     * can be converted to use the vite executors. These are the\n     * kept in the validFoundTargetName object.\n     */\n    await handleUnsupportedUserProvidedTargets(\n      userProvidedTargetIsUnsupported,\n      userProvidedTargetName,\n      validFoundTargetName\n    );\n\n    /**\n     * Once the user is at this stage, then they can go ahead and convert.\n     */\n\n    buildTargetName = validFoundTargetName.build ?? buildTargetName;\n    serveTargetName = validFoundTargetName.serve ?? serveTargetName;\n\n    if (projectType === 'application') {\n      moveAndEditIndexHtml(tree, schema, buildTargetName);\n    }\n\n    deleteWebpackConfig(\n      tree,\n      projectRoot,\n      targets?.[buildTargetName]?.options?.webpackConfig\n    );\n\n    editTsConfig(tree, schema);\n  }\n\n  const jsInitTask = await jsInitGenerator(tree, {\n    ...schema,\n    skipFormat: true,\n    tsConfigName: projectRoot === '.' ? 'tsconfig.json' : 'tsconfig.base.json',\n  });\n  tasks.push(jsInitTask);\n  const initTask = await initGenerator(tree, { ...schema, skipFormat: true });\n  tasks.push(initTask);\n  tasks.push(ensureDependencies(tree, schema));\n\n  const nxJson = readNxJson(tree);\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string'\n      ? p === '@nx/vite/plugin'\n      : p.plugin === '@nx/vite/plugin'\n  );\n\n  if (!hasPlugin) {\n    if (!projectAlreadyHasViteTargets.build) {\n      addOrChangeBuildTarget(tree, schema, buildTargetName);\n    }\n\n    if (!schema.includeLib) {\n      if (!projectAlreadyHasViteTargets.serve) {\n        addOrChangeServeTarget(tree, schema, serveTargetName);\n      }\n      if (!projectAlreadyHasViteTargets.preview) {\n        addPreviewTarget(tree, schema, serveTargetName);\n      }\n    }\n  }\n  if (projectType === 'library') {\n    // update tsconfig.lib.json to include vite/client\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n      (json) => {\n        if (!json.compilerOptions) {\n          json.compilerOptions = {};\n        }\n        if (!json.compilerOptions.types) {\n          json.compilerOptions.types = [];\n        }\n        if (!json.compilerOptions.types.includes('vite/client')) {\n          return {\n            ...json,\n            compilerOptions: {\n              ...json.compilerOptions,\n              types: [...json.compilerOptions.types, 'vite/client'],\n            },\n          };\n        }\n        return json;\n      }\n    );\n  }\n\n  if (!schema.newProject) {\n    // We are converting existing project to use Vite\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: schema.includeLib,\n          includeVitest: schema.includeVitest,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [\n            schema.compiler === 'swc'\n              ? `import react from '@vitejs/plugin-react-swc'`\n              : `import react from '@vitejs/plugin-react'`,\n          ],\n          plugins: ['react()'],\n        },\n        false,\n        undefined\n      );\n    } else {\n      createOrEditViteConfig(tree, schema, false, projectAlreadyHasViteTargets);\n    }\n  }\n\n  if (schema.includeVitest) {\n    const vitestTask = await vitestGenerator(tree, {\n      project: schema.project,\n      uiFramework: schema.uiFramework,\n      inSourceTests: schema.inSourceTests,\n      coverageProvider: 'v8',\n      skipViteConfig: true,\n      testTarget: testTargetName,\n      skipFormat: true,\n      addPlugin: schema.addPlugin,\n    });\n    tasks.push(vitestTask);\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nexport default viteConfigurationGenerator;\n"],"names":["viteConfigurationGenerator","viteConfigurationGeneratorInternal","host","schema","addPlugin","tree","nxJson","tasks","process","env","NX_ADD_PLUGINS","projectConfig","readProjectConfiguration","project","targets","root","projectRoot","projectType","buildTargetName","serveTargetName","testTargetName","includeLib","testEnvironment","projectAlreadyHasViteTargets","newProject","userProvidedTargetName","build","buildTarget","serve","serveTarget","test","testTarget","validFoundTargetName","projectContainsUnsupportedExecutor","userProvidedTargetIsUnsupported","alreadyHasNxViteTargets","findExistingTargetsInProject","Error","handleUnknownExecutors","handleUnsupportedUserProvidedTargets","moveAndEditIndexHtml","deleteWebpackConfig","options","webpackConfig","editTsConfig","jsInitTask","jsInitGenerator","skipFormat","tsConfigName","push","initTask","initGenerator","ensureDependencies","readNxJson","hasPlugin","plugins","some","p","plugin","addOrChangeBuildTarget","addOrChangeServeTarget","preview","addPreviewTarget","updateJson","joinPathFragments","json","compilerOptions","types","includes","uiFramework","createOrEditViteConfig","includeVitest","inSourceTests","rollupOptionsExternal","imports","compiler","undefined","vitestTask","vitestGenerator","coverageProvider","skipViteConfig","formatFiles","runTasksInSerial"],"mappings":"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"}