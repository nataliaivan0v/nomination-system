{"version":3,"sources":["../../../../../../packages/vite/src/generators/vitest/vitest-generator.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  formatFiles,\n  generateFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  offsetFromRoot,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n} from '@nx/devkit';\nimport {\n  addOrChangeTestTarget,\n  createOrEditViteConfig,\n  findExistingTargetsInProject,\n} from '../../utils/generator-utils';\nimport { VitestGeneratorSchema } from './schema';\n\nimport initGenerator from '../init/init';\nimport {\n  vitestCoverageIstanbulVersion,\n  vitestCoverageV8Version,\n} from '../../utils/versions';\n\nimport { addTsLibDependencies, initGenerator as jsInitGenerator } from '@nx/js';\nimport { join } from 'path';\nimport { ensureDependencies } from '../../utils/ensure-dependencies';\n\nexport function vitestGenerator(\n  tree: Tree,\n  schema: VitestGeneratorSchema,\n  hasPlugin = false\n) {\n  return vitestGeneratorInternal(\n    tree,\n    { addPlugin: false, ...schema },\n    hasPlugin\n  );\n}\n\nexport async function vitestGeneratorInternal(\n  tree: Tree,\n  schema: VitestGeneratorSchema,\n  hasPlugin = false\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const { targets, root, projectType } = readProjectConfiguration(\n    tree,\n    schema.project\n  );\n\n  tasks.push(await jsInitGenerator(tree, { ...schema, skipFormat: true }));\n  const initTask = await initGenerator(tree, {\n    skipFormat: true,\n    addPlugin: schema.addPlugin,\n  });\n  tasks.push(initTask);\n  tasks.push(ensureDependencies(tree, schema));\n\n  const nxJson = readNxJson(tree);\n  const hasPluginCheck = nxJson.plugins?.some(\n    (p) =>\n      (typeof p === 'string'\n        ? p === '@nx/vite/plugin'\n        : p.plugin === '@nx/vite/plugin') || hasPlugin\n  );\n  if (!hasPluginCheck) {\n    const testTarget =\n      schema.testTarget ??\n      findExistingTargetsInProject(targets).validFoundTargetName.test ??\n      'test';\n    addOrChangeTestTarget(tree, schema, testTarget);\n  }\n\n  if (!schema.skipViteConfig) {\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: projectType === 'library',\n          includeVitest: true,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [`import react from '@vitejs/plugin-react'`],\n          plugins: ['react()'],\n          coverageProvider: schema.coverageProvider,\n        },\n        true\n      );\n    } else {\n      createOrEditViteConfig(\n        tree,\n        {\n          ...schema,\n          includeVitest: true,\n          includeLib: projectType === 'library',\n        },\n        true\n      );\n    }\n  }\n\n  createFiles(tree, schema, root);\n  updateTsConfig(tree, schema, root);\n\n  const coverageProviderDependency = getCoverageProviderDependency(\n    schema.coverageProvider\n  );\n\n  const installCoverageProviderTask = addDependenciesToPackageJson(\n    tree,\n    {},\n    coverageProviderDependency\n  );\n  tasks.push(installCoverageProviderTask);\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nfunction updateTsConfig(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  if (tree.exists(joinPathFragments(projectRoot, 'tsconfig.spec.json'))) {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.spec.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (\n          json.references &&\n          !json.references.some((r) => r.path === './tsconfig.spec.json')\n        ) {\n          json.references.push({\n            path: './tsconfig.spec.json',\n          });\n        }\n        return json;\n      }\n    );\n  } else {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n  }\n\n  if (options.inSourceTests) {\n    const tsconfigLibPath = joinPathFragments(projectRoot, 'tsconfig.lib.json');\n    const tsconfigAppPath = joinPathFragments(projectRoot, 'tsconfig.app.json');\n    if (tree.exists(tsconfigLibPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    } else if (tree.exists(tsconfigAppPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.app.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    }\n\n    addTsLibDependencies(tree);\n  }\n}\n\nfunction createFiles(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  generateFiles(tree, join(__dirname, 'files'), projectRoot, {\n    tmpl: '',\n    ...options,\n    projectRoot,\n    offsetFromRoot: offsetFromRoot(projectRoot),\n  });\n}\n\nfunction getCoverageProviderDependency(\n  coverageProvider: VitestGeneratorSchema['coverageProvider']\n) {\n  switch (coverageProvider) {\n    case 'v8':\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8Version,\n      };\n    case 'istanbul':\n      return {\n        '@vitest/coverage-istanbul': vitestCoverageIstanbulVersion,\n      };\n    default:\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8Version,\n      };\n  }\n}\n\nexport default vitestGenerator;\n"],"names":["vitestGenerator","vitestGeneratorInternal","tree","schema","hasPlugin","addPlugin","nxJson","tasks","targets","root","projectType","readProjectConfiguration","project","push","jsInitGenerator","skipFormat","initTask","initGenerator","ensureDependencies","readNxJson","hasPluginCheck","plugins","some","p","plugin","testTarget","findExistingTargetsInProject","validFoundTargetName","test","addOrChangeTestTarget","skipViteConfig","uiFramework","createOrEditViteConfig","includeLib","includeVitest","inSourceTests","rollupOptionsExternal","imports","coverageProvider","createFiles","updateTsConfig","coverageProviderDependency","getCoverageProviderDependency","installCoverageProviderTask","addDependenciesToPackageJson","formatFiles","runTasksInSerial","options","projectRoot","exists","joinPathFragments","updateJson","json","compilerOptions","types","includes","references","r","path","tsconfigLibPath","tsconfigAppPath","addTsLibDependencies","generateFiles","join","__dirname","tmpl","offsetFromRoot","vitestCoverageV8Version","vitestCoverageIstanbulVersion"],"mappings":"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"}