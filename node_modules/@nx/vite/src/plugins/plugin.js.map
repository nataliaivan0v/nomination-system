{"version":3,"sources":["../../../../../packages/vite/src/plugins/plugin.ts"],"sourcesContent":["import {\n  CreateDependencies,\n  CreateNodes,\n  CreateNodesContext,\n  detectPackageManager,\n  joinPathFragments,\n  readJsonFile,\n  TargetConfiguration,\n  workspaceRoot,\n  writeJsonFile,\n} from '@nx/devkit';\nimport { dirname, isAbsolute, join, relative } from 'path';\nimport { getNamedInputs } from '@nx/devkit/src/utils/get-named-inputs';\nimport { existsSync, readdirSync } from 'fs';\nimport { calculateHashForCreateNodes } from '@nx/devkit/src/utils/calculate-hash-for-create-nodes';\nimport { projectGraphCacheDirectory } from 'nx/src/utils/cache-directory';\nimport { getLockFileName } from '@nx/js';\nimport { loadViteDynamicImport } from '../utils/executor-utils';\n\nexport interface VitePluginOptions {\n  buildTargetName?: string;\n  testTargetName?: string;\n  serveTargetName?: string;\n  previewTargetName?: string;\n  serveStaticTargetName?: string;\n}\n\nconst cachePath = join(projectGraphCacheDirectory, 'vite.hash');\nconst targetsCache = existsSync(cachePath) ? readTargetsCache() : {};\n\nconst calculatedTargets: Record<\n  string,\n  Record<string, TargetConfiguration>\n> = {};\n\nfunction readTargetsCache(): Record<\n  string,\n  Record<string, TargetConfiguration>\n> {\n  return readJsonFile(cachePath);\n}\n\nfunction writeTargetsToCache(\n  targets: Record<string, Record<string, TargetConfiguration>>\n) {\n  writeJsonFile(cachePath, targets);\n}\n\nexport const createDependencies: CreateDependencies = () => {\n  writeTargetsToCache(calculatedTargets);\n  return [];\n};\n\nexport const createNodes: CreateNodes<VitePluginOptions> = [\n  '**/{vite,vitest}.config.{js,ts,mjs,mts,cjs,cts}',\n  async (configFilePath, options, context) => {\n    const projectRoot = dirname(configFilePath);\n    // Do not create a project if package.json and project.json isn't there.\n    const siblingFiles = readdirSync(join(context.workspaceRoot, projectRoot));\n    if (\n      !siblingFiles.includes('package.json') &&\n      !siblingFiles.includes('project.json')\n    ) {\n      return {};\n    }\n\n    options = normalizeOptions(options);\n\n    const hash = calculateHashForCreateNodes(projectRoot, options, context, [\n      getLockFileName(detectPackageManager(context.workspaceRoot)),\n    ]);\n    const targets = targetsCache[hash]\n      ? targetsCache[hash]\n      : await buildViteTargets(configFilePath, projectRoot, options, context);\n\n    calculatedTargets[hash] = targets;\n\n    return {\n      projects: {\n        [projectRoot]: {\n          root: projectRoot,\n          targets,\n        },\n      },\n    };\n  },\n];\n\nasync function buildViteTargets(\n  configFilePath: string,\n  projectRoot: string,\n  options: VitePluginOptions,\n  context: CreateNodesContext\n) {\n  const absoluteConfigFilePath = joinPathFragments(\n    context.workspaceRoot,\n    configFilePath\n  );\n\n  // Workaround for the `build$3 is not a function` error that we sometimes see in agents.\n  // This should be removed later once we address the issue properly\n  try {\n    const importEsbuild = () => new Function('return import(\"esbuild\")')();\n    await importEsbuild();\n  } catch {\n    // do nothing\n  }\n  const { resolveConfig } = await loadViteDynamicImport();\n  const viteConfig = await resolveConfig(\n    {\n      configFile: absoluteConfigFilePath,\n      mode: 'development',\n    },\n    'build'\n  );\n\n  const { buildOutputs, testOutputs, hasTest, isBuildable } = getOutputs(\n    viteConfig,\n    projectRoot\n  );\n\n  const namedInputs = getNamedInputs(projectRoot, context);\n\n  const targets: Record<string, TargetConfiguration> = {};\n\n  // If file is not vitest.config and buildable, create targets for build, serve, preview and serve-static\n  if (!configFilePath.includes('vitest.config') && isBuildable) {\n    targets[options.buildTargetName] = await buildTarget(\n      options.buildTargetName,\n      namedInputs,\n      buildOutputs,\n      projectRoot\n    );\n\n    targets[options.serveTargetName] = serveTarget(projectRoot);\n\n    targets[options.previewTargetName] = previewTarget(projectRoot);\n\n    targets[options.serveStaticTargetName] = serveStaticTarget(options) as {};\n  }\n\n  // if file is vitest.config or vite.config has definition for test, create target for test\n  if (configFilePath.includes('vitest.config') || hasTest) {\n    targets[options.testTargetName] = await testTarget(\n      namedInputs,\n      testOutputs,\n      projectRoot\n    );\n  }\n\n  return targets;\n}\n\nasync function buildTarget(\n  buildTargetName: string,\n  namedInputs: {\n    [inputName: string]: any[];\n  },\n  outputs: string[],\n  projectRoot: string\n) {\n  return {\n    command: `vite build`,\n    options: { cwd: joinPathFragments(projectRoot) },\n    cache: true,\n    dependsOn: [`^${buildTargetName}`],\n    inputs: [\n      ...('production' in namedInputs\n        ? ['production', '^production']\n        : ['default', '^default']),\n      {\n        externalDependencies: ['vite'],\n      },\n    ],\n    outputs,\n  };\n}\n\nfunction serveTarget(projectRoot: string) {\n  const targetConfig: TargetConfiguration = {\n    command: `vite serve`,\n    options: {\n      cwd: joinPathFragments(projectRoot),\n    },\n  };\n\n  return targetConfig;\n}\n\nfunction previewTarget(projectRoot: string) {\n  const targetConfig: TargetConfiguration = {\n    command: `vite preview`,\n    options: {\n      cwd: joinPathFragments(projectRoot),\n    },\n  };\n\n  return targetConfig;\n}\n\nasync function testTarget(\n  namedInputs: {\n    [inputName: string]: any[];\n  },\n  outputs: string[],\n  projectRoot: string\n) {\n  return {\n    command: `vitest run`,\n    options: { cwd: joinPathFragments(projectRoot) },\n    cache: true,\n    inputs: [\n      ...('production' in namedInputs\n        ? ['default', '^production']\n        : ['default', '^default']),\n      {\n        externalDependencies: ['vitest'],\n      },\n    ],\n    outputs,\n  };\n}\n\nfunction serveStaticTarget(options: VitePluginOptions) {\n  const targetConfig: TargetConfiguration = {\n    executor: '@nx/web:file-server',\n    options: {\n      buildTarget: `${options.buildTargetName}`,\n    },\n  };\n\n  return targetConfig;\n}\n\nfunction getOutputs(\n  viteConfig: Record<string, any> | undefined,\n  projectRoot: string\n): {\n  buildOutputs: string[];\n  testOutputs: string[];\n  hasTest: boolean;\n  isBuildable: boolean;\n} {\n  const { build, test } = viteConfig;\n\n  const buildOutputPath = normalizeOutputPath(\n    build?.outDir,\n    projectRoot,\n    'dist'\n  );\n\n  const isBuildable =\n    build?.lib ||\n    build?.rollupOptions?.inputs ||\n    existsSync(join(workspaceRoot, projectRoot, 'index.html'));\n\n  const reportsDirectoryPath = normalizeOutputPath(\n    test?.coverage?.reportsDirectory,\n    projectRoot,\n    'coverage'\n  );\n\n  return {\n    buildOutputs: [buildOutputPath],\n    testOutputs: [reportsDirectoryPath],\n    hasTest: !!test,\n    isBuildable,\n  };\n}\n\nfunction normalizeOutputPath(\n  outputPath: string | undefined,\n  projectRoot: string,\n  path: 'coverage' | 'dist'\n): string | undefined {\n  if (!outputPath) {\n    if (projectRoot === '.') {\n      return `{projectRoot}/${path}`;\n    } else {\n      return `{workspaceRoot}/${path}/{projectRoot}`;\n    }\n  } else {\n    if (isAbsolute(outputPath)) {\n      return `{workspaceRoot}/${relative(workspaceRoot, outputPath)}`;\n    } else {\n      if (outputPath.startsWith('..')) {\n        return join('{workspaceRoot}', join(projectRoot, outputPath));\n      } else {\n        return join('{projectRoot}', outputPath);\n      }\n    }\n  }\n}\n\nfunction normalizeOptions(options: VitePluginOptions): VitePluginOptions {\n  options ??= {};\n  options.buildTargetName ??= 'build';\n  options.serveTargetName ??= 'serve';\n  options.previewTargetName ??= 'preview';\n  options.testTargetName ??= 'test';\n  options.serveStaticTargetName ??= 'serve-static';\n  return options;\n}\n"],"names":["createDependencies","createNodes","cachePath","join","projectGraphCacheDirectory","targetsCache","existsSync","readTargetsCache","calculatedTargets","readJsonFile","writeTargetsToCache","targets","writeJsonFile","configFilePath","options","context","projectRoot","dirname","siblingFiles","readdirSync","workspaceRoot","includes","normalizeOptions","hash","calculateHashForCreateNodes","getLockFileName","detectPackageManager","buildViteTargets","projects","root","absoluteConfigFilePath","joinPathFragments","importEsbuild","Function","resolveConfig","loadViteDynamicImport","viteConfig","configFile","mode","buildOutputs","testOutputs","hasTest","isBuildable","getOutputs","namedInputs","getNamedInputs","buildTargetName","buildTarget","serveTargetName","serveTarget","previewTargetName","previewTarget","serveStaticTargetName","serveStaticTarget","testTargetName","testTarget","outputs","command","cwd","cache","dependsOn","inputs","externalDependencies","targetConfig","executor","build","test","buildOutputPath","normalizeOutputPath","outDir","lib","rollupOptions","reportsDirectoryPath","coverage","reportsDirectory","outputPath","path","isAbsolute","relative","startsWith"],"mappings":"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"}